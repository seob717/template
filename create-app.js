#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

const [,, command, appName] = process.argv;

if (command !== 'app' || !appName) {
  console.error('Usage: node create-app.js app <app-name>');
  console.error('Example: node create-app.js app my-web-app');
  process.exit(1);
}

// Extract app type from app name suffix or default to web
let appType = 'web';
if (appName.includes('-docs')) {
  appType = 'docs';
}

const validTypes = ['web', 'docs'];
if (!validTypes.includes(appType)) {
  console.error(`Invalid app type: ${appType}. Valid types: ${validTypes.join(', ')}`);
  process.exit(1);
}

const templates = {
  web: {
    dependencies: {
      "@radix-ui/react-slot": "^1.2.3",
      "@repo/ui": "workspace:*",
      "next": "^15.3.0",
      "react": "^19.1.0",
      "react-dom": "^19.1.0"
    },
    devDependencies: {
      "@next/eslint-plugin-next": "^15.3.0",
      "@repo/eslint-config": "workspace:*",
      "@repo/tailwind-config": "workspace:*",
      "@repo/typescript-config": "workspace:*",
      "@tailwindcss/postcss": "^4.1.5",
      "@types/node": "^22.15.30",
      "@types/react": "^19.1.0",
      "@types/react-dom": "^19.1.1",
      "autoprefixer": "^10.4.20",
      "eslint": "^9.30.0",
      "postcss": "^8.5.3",
      "tailwindcss": "^4.1.5",
      "typescript": "5.8.2"
    },
    scripts: {
      "dev": "next dev --turbopack",
      "build": "next build",
      "start": "next start",
      "lint": "next lint --max-warnings 0",
      "check-types": "tsc --noEmit"
    }
  },
  docs: {
    dependencies: {
      "@repo/ui": "workspace:*",
      "next": "^15.3.0",
      "react": "^19.1.0",
      "react-dom": "^19.1.0"
    },
    devDependencies: {
      "@next/eslint-plugin-next": "^15.3.0",
      "@repo/eslint-config": "workspace:*",
      "@repo/tailwind-config": "workspace:*",
      "@repo/typescript-config": "workspace:*",
      "@tailwindcss/postcss": "^4.1.5",
      "@types/node": "^22.15.30",
      "@types/react": "^19.1.0",
      "@types/react-dom": "^19.1.1",
      "autoprefixer": "^10.4.20",
      "eslint": "^9.30.0",
      "postcss": "^8.5.3",
      "tailwindcss": "^4.1.5",
      "typescript": "5.8.2"
    },
    scripts: {
      "dev": "next dev --turbopack",
      "build": "next build",
      "start": "next start",
      "lint": "next lint --max-warnings 0",
      "check-types": "tsc --noEmit"
    }
  }
};

const files = {
  'next.config.ts': `import type { NextConfig } from "next";

const config: NextConfig = {
  transpilePackages: ["@repo/ui"],
};

export default config;
`,
  'tsconfig.json': `{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
`,
  'postcss.config.js': `export default {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};
`,
  'eslint.config.js': `import baseConfig from "@repo/eslint-config/base.js";
import nextjsConfig from "@repo/eslint-config/nextjs.js";
import reactConfig from "@repo/eslint-config/react.js";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: [".next/**"],
  },
  ...baseConfig,
  ...reactConfig,
  ...nextjsConfig,
];
`,
  'next-env.d.ts': `/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
`,
  'app/layout.tsx': `import type { Metadata } from "next";
import "@repo/ui/styles.css";
import "./globals.css";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}
`,
  'app/page.tsx': `import { Button } from "@repo/ui/components/button";

export default function Home() {
  return (
    <div className="flex min-h-screen items-center justify-center">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">Welcome to Next.js</h1>
        <Button>Get Started</Button>
      </div>
    </div>
  );
}
`,
  'app/globals.css': `@import "@repo/tailwind-config";
`,
  'README.md': `# ${appName}

This is a Next.js application generated by create-app script.

## Getting Started

First, install the dependencies:

\`\`\`bash
pnpm install
\`\`\`

Then, run the development server:

\`\`\`bash
pnpm dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
`
};

const appPath = path.join(process.cwd(), 'apps', appName);

console.log(`🚀 Creating ${appType} app: ${appName}`);

// Check if directory exists
if (fs.existsSync(appPath)) {
  console.error(`❌ Directory apps/${appName} already exists`);
  process.exit(1);
}

// Create directory
fs.mkdirSync(appPath, { recursive: true });

// Create package.json
const packageJson = {
  name: appName,
  version: "1.0.0",
  type: "module",
  private: true,
  scripts: templates[appType].scripts,
  dependencies: templates[appType].dependencies,
  devDependencies: templates[appType].devDependencies
};

fs.writeFileSync(
  path.join(appPath, 'package.json'),
  JSON.stringify(packageJson, null, 2)
);

// Create app directory structure
fs.mkdirSync(path.join(appPath, 'app'), { recursive: true });
fs.mkdirSync(path.join(appPath, 'public'), { recursive: true });

// Create files
Object.entries(files).forEach(([filePath, content]) => {
  const fullPath = path.join(appPath, filePath);
  const dir = path.dirname(fullPath);
  
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  fs.writeFileSync(fullPath, content);
});

console.log(`✅ Successfully created ${appName} app in apps/${appName}`);
console.log(`
📦 Next steps:
1. cd apps/${appName}
2. pnpm install
3. pnpm dev

🔗 Or run from root:
   pnpm --filter ${appName} dev
`);